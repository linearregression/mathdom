MathDOM - accessing terms through a MathML DOM in Python
--------------------------------------------------------

I'd be really glad to hear if this is useful. And maybe you have an
idea how to make it better. :) Just send me an email:
Stefan Behnel <scoder@users.sourceforge.net>

See LICENSE file for licensing.

You can find the latest version at
http://mathdom.sourceforge.net


What is MathDOM?
----------------

The package comprises parsers for a subset of Content MathML 2.0 and
infix terms (using pyparsing [1]). It provides access to the term tree
through a DOM (based on PyXML/4DOM [2]) and allows serialization to
Content MathML and literal terms in infix, prefix and postfix
notation.

If you want to test it, run 'examples/infix.py'.


Current status:
---------------

This is currently beta software. The API is partially stabilizing, but
may otherwise still be subject to changes. The output and DOM APIs
will likely evolve without major compatibility breaks. The
input/parser API is not stable yet.

Every comment or suggestion is appreciated, as are patches.


Version 0.4.0 / 0.5.0:
----------------------

These versions restructure most of the term input/output API,
i.e. parsing terms, generating the DOM and serializing to MathML and
literal terms. The usage should become much simpler and much more
consistent this way. However, it also means that code using the old
API will break. Please look at the examples to see how the new API
works. I hope you will like it.


The files:
----------

* Installation:

setup.py          - distutils, try "python setup.py install"


* Examples are in "examples/":

examples/infix.py - example program: read a term, write out MathML,
                    infix, prefix, postfix representations
                    -> START HERE if you want to figure out how
                    everything works.


* The actual package source is in "mathml/":

src/mathdom.py    - the DOM implemention

src/xmlterm.py    - SAX generator for the termparser AST

src/termparser.py - parser/serializer for literal terms,
                    framework for converters


References
----------

[1] pyparsing: http://pyparsing.sf.net
[2] PyXML:     http://pyxml.sf.net


Have fun!

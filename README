MathDOM - accessing terms through a MathML DOM in Python
--------------------------------------------------------

I'd be really glad to hear if this is useful. And maybe you have an
idea how to make it better. :) Just send me an email:
Stefan Behnel <scoder@users.sourceforge.net>

See LICENSE file for licensing.

You can find the latest version at
http://mathdom.sourceforge.net


What is MathDOM?
----------------

The package comprises parsers for a subset of Content MathML 2.0 and
infix terms (using pyparsing [1]). It provides access to the term tree
through a DOM (based on PyXML/4DOM [2]) and allows serialization to
Content MathML and literal terms in infix, prefix and postfix
notation.

If you want to test it, run 'examples/infix.py'.

New in 0.5.2: There is a second implementation that shares most of the
code but replaces the DOM implementation with a patched version of
lxml [3], an XML API similar to ElementTree [4], but implemented on
top of libxml2 [5]. Please apply the patch that comes with MathDOM if
you want to use lxml. The patch should apply to version 0.7 of lxml.


A quick example:
----------------

>>> from mathml.lmathdom import MathDOM                     # use lxml implementation
>>> doc = MathDOM.fromString("+2^x+4*-5i/6", "infix_term")  # parse infix term
>>> [ n.value() for n in doc.xpath(u'//math:cn[@type="integer"]') ] # find integers
[2, 4, 6]
>>> for apply_tag in doc.xpath(u'//math:apply[math:plus]'): # replace '+' with '-'
...     apply_tag.set_operator(u'minus')
>>> from mathml.utils import pyterm                         # register Python term builder
>>> doc.serialize("python")                                 # serialize to Python term
u'2 ** x - 4 * (-5j) / 6'

Simple, isn't it ?


Current status:
---------------

This is currently beta software. The API is partially stabilizing, but
may otherwise still be subject to changes. The output and DOM APIs
will likely evolve without major compatibility breaks. The
input/parser API is not stable yet.

Please keep in mind that the best way to stabilize an API is to have
users use it and give feed back. Every comment or suggestion is
appreciated, as are patches.


Version 0.4.0 / 0.5.0:
----------------------

These versions restructure most of the term input/output API,
i.e. parsing terms, generating the DOM and serializing to MathML and
literal terms. The usage should become much simpler and much more
consistent this way. However, it also means that code using the old
API will break. Please look at the examples to see how the new API
works. I hope you will like it.


The files:
----------

* Installation:

setup.py           - distutils, try "python setup.py install"


* Patching lxml:

lxml.patch - apply in the lxml source directory (using -p0).


* Examples are in "examples/":

examples/infix.py  - example program: read a term, write out MathML,
                     infix, prefix, postfix representations
                     -> START HERE if you want to figure out how
                     everything works.

examples/dom.py    - example program: read a term, do some DOM stuff

examples/ldom.py   - example program: read a term, do some lxml/xpath stuff


* The actual package source is in "mathml/":

src/mathdom.py     - the DOM implemention

src/lmathdom.py    - the lxml implemention

src/xmlterm.py     - SAX generator for the termparser AST

src/termparser.py  - parser for literal infix terms

src/termbuilder.py - serializer for literal terms,
                     framework for output converters


References
----------

[1] pyparsing:   http://pyparsing.sf.net
[2] PyXML:       http://pyxml.sf.net
[3] lxml:        http://codespeak.net/lxml/
[4] ElementTree: http://effbot.org/zone/element-index.htm
[5] libxml2:     http://xmlsoft.org/


Have fun!
